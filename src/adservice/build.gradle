plugins {
    id 'com.google.protobuf' version '0.9.5'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'idea'
    id 'application'
    id 'jacoco' // ðŸ”¥ Added
    id 'org.sonarqube' version '4.4.1.3373' // ðŸ”¥ SonarCloud plugin
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'Ad Service'
group = "adservice"
version = "0.1.0-SNAPSHOT"

def grpcVersion = "1.73.0"
def jacksonCoreVersion = "2.19.1"
def jacksonDatabindVersion = "2.19.1"
def protocVersion = "4.31.1"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation "com.google.api.grpc:proto-google-common-protos:2.59.1",
                "javax.annotation:javax.annotation-api:1.3.2",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "io.grpc:grpc-census:${grpcVersion}",
                "org.apache.logging.log4j:log4j-core:2.25.1",
                "com.google.protobuf:protobuf-java:${protocVersion}"

        runtimeOnly "com.fasterxml.jackson.core:jackson-core:${jacksonCoreVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.72.Final"
    }

    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

googleJavaFormat {
    toolVersion '1.27.0'
}

sourceSets {
    main {
        java {
            srcDirs 'hipstershop'
            srcDirs 'build/generated/source/proto/main/java/hipstershop'
            srcDirs 'build/generated/source/proto/main/grpc/hipstershop'
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
        }
    }
}

// âœ… Test and reporting config
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required = true
        html.required = true
    }
}

// âœ… JaCoCo config
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    // Optional: customize report path
    reports {
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

// âœ… SonarCloud integration
sonarqube {
    properties {
        property "sonar.projectKey", "yash-org_microservices-adservice"
        property "sonar.organization", "yash-org"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "hipstershop"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
        property "sonar.jacoco.reportPaths", "${buildDir}/reports/jacoco/report.xml"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.login", System.getenv("sonar-token") // Inject via Harness
    }
}

// Docker and offline-related
startScripts.enabled = false

task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.compileClasspath
    into offlineCompile
}

task adService(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdService')
    applicationName = 'AdService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task adServiceClient(type: CreateStartScripts) {
    mainClass.set('hipstershop.AdServiceClient')
    applicationName = 'AdServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(adService)
    from(adServiceClient)
    fileMode = 0755
}
